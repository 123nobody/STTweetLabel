{"note":"Don't delete this file! It's used internally to help with page regeneration.","body":"# STTweetLabel\r\n\r\nA custom UILabel view controller for iOS with certain words tappable like Twitter (#Hashtag, @People and http://www.link.com/page)\r\n\r\n![STTweetLabel screenshot](https://raw.github.com/SebastienThiebaud/STTweetLabel/master/screenshot.png \"STTweetLabel Screenshot\")\r\n\r\n## Documentation\r\n\r\nYou need only 2 files:\r\n\r\n- `STTweetLabel.h`\r\n- `STTweetLabel.m`\r\n\r\nYou can change the fonts and colors for the different words (#Hashtag/@People AND http://link.com) via the `STTweetLabel` attributes.\r\n\r\nThe official documentation is available here: http://doc.sebastienthiebaud.us/Classes/STTweetLabel.html\r\n\r\n## Demo\r\n\r\nBuild and run the project STTweetLabelExample in Xcode to see `STTweetLabel` in action. \r\n\r\n## Example Usage\r\n\r\n``` objective-c\r\n    STTweetLabel *tweetLabel = [[STTweetLabel alloc] initWithFrame:CGRectMake(20.0, 60.0, 280.0, 200.0)];\r\n    \r\n    [tweetLabel setFont:[UIFont fontWithName:@\"HelveticaNeue\" size:17.0]];\r\n    [tweetLabel setTextColor:[UIColor blackColor]];\r\n    [tweetLabel setText:@\"Hi. This is a new tool for @you! Developed by->@SebThiebaud for #iPhone #ObjC... ;-) My GitHub page: https://t.co/pQXDoiYA\"];\r\n    [self.view addSubview:tweetLabel];\r\n```\r\n\r\nDon't forget to implement the `STLinkCallbackBlock`. Without implementing the callback block, you won't be able to detect if somebody has clicked on the hashtag, user account or even a website.\r\nBlocks are easy. All you need to do is add a few lines of code:\r\n\r\n``` objective-c\r\n    STLinkCallbackBlock callbackBlock = ^(STLinkActionType actionType, NSString *link) {\r\n\t        \r\n        NSString *displayString = NULL;\r\n        \r\n        // determine what the user clicked on\r\n        switch (actionType) {\r\n                \r\n            // if the user clicked on an account (@_max_k)    \r\n            case STLinkActionTypeAccount:\r\n                displayString = [NSString stringWithFormat:@\"Twitter account:\\n%@\", link];\r\n                break;\r\n            \r\n            // if the user clicked on a hashtag (#thisisreallycool)\r\n            case STLinkActionTypeHashtag:\r\n                displayString = [NSString stringWithFormat:@\"Twitter hashtag:\\n%@\", link];\r\n                break;\r\n            \r\n            // if the user clicked on a website (http://github.com/SebastienThiebaud)\r\n            case STLinkActionTypeWebsite:\r\n                displayString = [NSString stringWithFormat:@\"Website:\\n%@\", link];\r\n                break;\r\n        }\r\n        \r\n        [_displayLabel setText:displayString];\r\n        \r\n    };\r\n```\r\n\r\nOnce you have added those few lines of code (depending on what you want to do when the user taps on something), make sure to tell your instance of STTweetLabel to call this block:\r\n\r\n``` objective-c\r\n    [_tweetLabel setCallbackBlock:callbackBlock];\r\n```\r\n    \r\n## Credits\r\n\r\nInspired by the original Twitter application.\r\n\r\n## Thanks to\r\n - @Twittom180 [http://github.com/TomGiana] for disturbing me while I'm focused in my code!\r\n - @max_k [http://github.com/maxkramer] for implementing NSBlocks! \r\n\r\n## Contact\r\n\r\nSebastien Thiebaud\r\n\r\n- http://github.com/SebastienThiebaud\r\n- http://twitter.com/SebThiebaud\r\n\r\n## License\r\n\r\nSTTweetLabel is available under the MIT license.","name":"STTweetLabel","google":"","tagline":"An UILabel with #hashtag @name http:// tappable"}